from aiogram import F, Router
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext

from bot.keyboards.keyboardsMainPage import *
from bot.handlers.states.StartState import RegForm

from database.pseudo_database.db import *


router_start = Router()


@router_start.message(CommandStart())
async def start_command(message: Message):
    # userok = message.from_user.id
    # if userok == 5288849370 or userok == 1023964787:
    #     await message.answer('–Æ–†–ê –¢–´ –ó–ê–ë–ê–ù–ï–ù', reply_markup=yuraban)
    # else:
        if message.from_user.id not in users:
            await message.answer(
                text='–ü–æ—Ö–æ–∂–µ, —á—Ç–æ –≤—ã –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º '
                     '\n–ù–∞—á–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! '
                     '\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.',
                reply_markup=start_keyboard
            )
            db.update({
                message.from_user.id: dict({
                    'coins': 0,
                    'last_farm': 0
                })
            })
        else:
            await message.reply(
                text=f'–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {message.from_user.first_name}!',
                reply_markup=keyboard_if_user_validate)


# @router_start.message(F.text == '–ò–ó–í–ò–ù–ò–¢–ï –ú–ï–ù–Ø, –Ø –ë–û–õ–¨–®–ï –¢–ê–ö –ù–ï –ë–£–î–£')
# async def sorry(message: Message):
#     await message.answer('–õ–∞–¥–Ω–æ, –Æ—Ä–∞, –Ω–æ –±–æ–ª—å—à–µ –Ω–µ —Å–ø–∞–º—å')
#     if message.from_user.id not in users:
#         await message.answer(text='–î–æ–±—Ä—ã–π –¥–µ–Ω—å, –ø–æ—Ö–æ–∂–µ, —á—Ç–æ –≤—ã –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ –±–æ—Ç <<–±–æ—Ç>>, '
#                                   '<<–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ—Å–∫—Ç>>',
#                              reply_markup=start_keyboard)
#         db.update({
#             message.from_user.id: dict({
#                 'coins': 0,
#                 'last_farm': 0
#             })
#         })
#     else:
#         await message.reply(
#             text=f'—Å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {message.from_user.first_name}',
#             reply_markup=keyboard_if_user_validate)


@router_start.message(F.text == "üìÉ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
async def register(message: Message, state: FSMContext):
    await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è")
    await state.set_state(RegForm.username)


@router_start.message(F.text == "üé´ –ò–Ω—Ñ–æ")
async def help_text(message: Message):
    await message.answer(
        text="–° —á–µ–≥–æ –Ω–∞—á–∞—Ç—å?"
             "\n–§–∞—Ä–º–∏—Ç—å –∫–æ–∏–Ω—ã! –≠—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–µ, —á–µ–º –≤–∞–º "
             "–ø—Ä–∏–¥–µ—Ç—Å—è –∑–∞–Ω–∏–º–∞—Ç—å—Å—è. –¢–∞–∫ –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å "
             "–≤–∫–ª–∞–¥ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–æ–∏–Ω—ã –∞–∫—Ç–∏–≤–Ω–µ–µ"
    )


@router_start.message(RegForm.username)
async def form_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    name_user = message.text
    # if name_user == '–Æ—Ä–∞':
    #     await message.answer(f'–¢–µ–±–µ –Ω–µ–ª—å–∑—è –∂–µ –Ω—É', reply_markup=yuraban)
    # else:
    #     pass
    ID = message.from_user.id
    db[ID].update({'name': name_user})
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç')
    await state.set_state(RegForm.userage)


@router_start.message(RegForm.userage)
async def form_age(message: Message, state: FSMContext):
    ager = int(message.text)
    if ager < 16 or ager > 80:
        await state.update_data(age=message.text)
        ag = int(message.text)
        db[message.from_user.id].update({'age': ag})
        await message.answer(text='–ü–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º –±–æ—Ç–æ–º –º–æ–∂–Ω–æ —Å 16 –ª–µ—Ç')
        await state.clear()

    else:
        await state.update_data(age=message.text)
        age = int(message.text)
        db[message.from_user.id].update({'age': age})
        await message.answer(
            text='–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Å–±–æ—Ä—É LUKCOIN',
            reply_markup=keyboard_if_user_validate
        )
        await state.clear()
