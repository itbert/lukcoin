from time import time

from aiogram import F, Router
from aiogram.fsm.context import FSMContext

from bot.handlers.states.MainStates import SetNewName
from bot.keyboards.keyboardsMainPage import *

from database.pseudo_database.db import db


router = Router()


# –§–∞—Ä–º –∫–æ–∏–Ω–æ–≤
@router.message(F.text == "‚ûï LUCOIN")
async def form_age(message: Message):

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    cur_time: float = time()
    ID: id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ–∑—Ä–∞—Å—Ç, —Ñ–∞—Ä–º –∫–æ–∏–Ω–æ–≤
    if db[ID]['age'] >= 16:
        if cur_time - db[message.from_user.id]['last_farm'] > 18000:

            db[ID].update({
                'coins': db[ID]['coins'] + 50  # + 10_000 –µ—Å–ª–∏ —Ç–µ—Å—Ç–∏–º/–ø–æ–∫–∞–∑—ã–≤–∞–µ–º
            })

            db[ID].update({'last_farm': cur_time})

            await message.reply('+ 50 LUKCOIN-–æ–≤')
        else:
            await message.reply(f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ {round((18000 - (cur_time - db[ID]['last_farm'])) / 60)} –º–∏–Ω—É—Ç "
                                f"–¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–∞—Ä–º–∞")

        # print(db)

    else:
        await message.answer(text='üí¢ –í–∞–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 16 –ª–µ—Ç —á—Ç–æ–±—ã —Ñ–∞—Ä–º–∏—Ç—å')


@router.message(F.text == "üí† –ü—Ä–æ—Ñ–∏–ª—å")
async def show_data(message: Message):

    ID: int = message.from_user.id

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ

    name: str = db[ID]['name']
    coins: int = db[ID]['coins']
    wallet: int = ID

    await message.answer(
        text=f"üóø –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {name}"
             f"\nüíé LUCOIN-–æ–≤: {coins}"
             f"\nüåØ –ù–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞: {wallet}",
        reply_markup=profile_keyboard
    )


@router.message(F.text == 'üíä –ú–∞–≥–∞–∑–∏–Ω')
async def go_to_shop(message: Message):
    await message.answer(
        text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
        reply_markup=shop_keyboard
    )


@router.message(F.text == 'üíµ –í–∫–ª–∞–¥')
async def go_to_stake_my_money(message: Message):
    await message.answer(
        text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
        reply_markup=stacking
    )


@router.message(F.text == '‚è™')
async def back_to_menu(message:  Message, state: FSMContext):
    await message.answer(
        text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        reply_markup=keyboard_if_user_validate
    )

    await state.clear()


@router.message(F.text == '–°–º–µ–Ω–∞ –∏–º–µ–Ω–∏')
async def start_change_name(message:  Message, state: FSMContext):

    ID: int = message.from_user.id

    # –°–ø–∏—Å–∞–Ω–∏–µ –∫–æ–∏–Ω–æ–≤ –∑–∞ –æ–ø–µ—Ä–∞—Ü–∏—é

    if int(db[ID]['coins']) >= 5:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è')
        db[ID]['coins'] -= 150
        await state.set_state(SetNewName.new_name)
    else:
        await message.answer(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–Ω—á–æ LUKCOIN-–æ–≤ \n'
                             f'–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–º–µ–Ω—ã –∏–º–µ–Ω–∏: 150\n'
                             f'–£ –≤–∞—Å: {db[ID]["coins"]}')

        await state.clear()


@router.message(SetNewName.new_name)
async def change_name(message: Message, state: FSMContext):

    ID: int = message.from_user.id
    new_username: str = message.text

    # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö (–≤—ã—à–µ)
    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –Ω–∞ –Ω–æ–≤–æ–µ

    await state.update_data(new_name=new_username)

    db[ID]['name'] = new_username

    await message.answer(f'–ò–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_username}'
                         f'\n–°–ø–∏—Å–∞–Ω–æ 150 LUKCOIN-–æ–≤')

    # print(db) - –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    await state.clear()


@router.message(F.text == 'üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥')
async def leader_bord(message:  Message):

    users: dict = db.keys()

    user_table: list = [(
        userid,
        db[userid]['coins'],
        db[userid]['name']) for userid in users
    ]
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–æ–∏–Ω–æ–≤

    user_table.sort(key=lambda x: int(x[1]))

    # print(user_table)

    await message.answer(text=f'üìä –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤'
                              f'\n1Ô∏è‚É£ {db[user_table[-1][0]]["name"]} - {db[user_table[-1][0]]["coins"]}'
                              f'\n2Ô∏è‚É£ {db[user_table[-2][0]]["name"]} - {db[user_table[-2][0]]["coins"]}'
                              f'\n3Ô∏è‚É£ {db[user_table[-3][0]]["name"]} - {db[user_table[-3][0]]["coins"]}')


@router.message(F.text == '–ú–µ—Ä—á')
async def shop(message: Message):
    await message.answer(
        text='–ú–∞–≥–∞–∑–∏–Ω –õ–£–ö–û–ô–õ–∞ –ª—é–±–∏–º–æ–≥–æ ‚ù§',
        reply_markup=shop_luk
    )
