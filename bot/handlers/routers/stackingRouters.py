from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from datetime import datetime

from bot.keyboards.keyboardsMainPage import *
from bot.handlers.states.MainStates import StakingStates

from database.pseudo_database.db import db


router_stake = Router()


@router_stake.callback_query(F.data == 'open_stacking')
async def stacking_one(message: Message, state: FSMContext):

    ID: int = message.from_user.id

    coins: int = db[ID]['coins']

    await message.answer(
        text=f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª—é—Ç—ã –¥–ª—è —Å—Ç–µ–π–∫–∏–Ω–≥–∞, —É –≤–∞—Å: {coins}",
        show_alert=True
    )
    await state.set_state(StakingStates.waiting_for_amount)


@router_stake.message(StakingStates.waiting_for_amount)
async def stacking_two(message: Message, state: FSMContext):

    amount = int(message.text)
    ID: int = message.from_user.id

    coins: int = db[ID]['coins']

    # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –º–æ–Ω–µ—Ç –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–∫–ª–∞–¥–∞

    if 50 <= amount <= coins:

        await message.answer(text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {amount} LUKCOIN-–æ–≤")

        t = datetime.now()
        time_start = t.day

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è —Å –≤–∫–ª–∞–¥–æ–º

        db[ID].update({
            'stacking': {
                'amount_stacking': amount,
                'period_stacking': 0,
                'start_stacking': time_start,
                'end_stacking': 0
            }
        })

        # –°–ø–∏—Å–∞–Ω–∏–µ –∑–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –≤–∫–ª–∞–¥–∞

        db[ID]['stacking']['amount_stacking'] = amount
        db[ID]['coins'] -= amount

        await message.answer(text=f'–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –æ—Å—Ç–∞–ª–æ—Å—å: {db[ID]["coins"]} LUKCOIN')
        await message.answer(text=f'–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤–∫–ª–∞–¥–∞ (–æ—Ç 2-—Ö –¥–æ 10-–∏ –¥–Ω–µ–π)')

        await state.set_state(StakingStates.waiting_for_period)

    else:
        await message.answer(text=f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤, —É –≤–∞—Å: {db[ID]['coins']}. "
                                  f"\n–ú–∏–Ω–∏–º—É–º –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–∫–ª–∞–¥–∞: 100 –∫–æ–∏–Ω–æ–≤")

        await state.set_state(StakingStates.waiting_for_amount)


@router_stake.message(StakingStates.waiting_for_period)
async def stacking_three(message: Message, state: FSMContext):

    ID: int = message.from_user.id

    period_of_stacking: int = int(message.text)

    if period_of_stacking < 2 or period_of_stacking > 10:
        await message.answer(
            text='üí¢ –í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤–∫–ª–∞–¥–∞!!'
                 '\n–ù–æ –∫–æ–∏–Ω—ã –º—ã —É–∂–µ —Å–ø–∏—Å–∞–ª–∏, —Å–∞–º(-–∞) –≤–∏–Ω–æ–≤–∞—Ç(-–∞)'
        )

        await state.clear()
    else:
        start_stacking: int = db[ID]['stacking']['start_stacking']

        db[ID]['stacking']['period_stacking'] = period_of_stacking
        db[ID]['stacking']['end_stacking'] = start_stacking + period_of_stacking

        await message.reply(text=f'–£—Å–ø–µ—à–Ω–æ! –ü–µ—Ä–∏–æ–¥ –≤–∫–ª–∞–¥–∞ {db[ID]["stacking"]["period_stacking"]} –¥.,'
                                 f'\n–î–µ–Ω—å–≥–∏ –≤–µ—Ä–Ω—É—Ç—Å—è –Ω–∞ –≤–∫–ª–∞–¥ —á–µ—Ä–µ–∑ {db[ID]["stacking"]["period_stacking"]} –¥.')

        await state.clear()


@router_stake.callback_query(F.data == 'check_balance_stake')
async def check_balance_of_stake(message: Message):

    ID: int = message.from_user.id

    amount = int(db[ID]['stacking']['amount_stacking'])
    period = int(db[ID]['stacking']['period_stacking'])

    expected_percent: float | int = period / 10 + 1
    profit = round(amount * expected_percent)

    await message.answer(
        text=f"üéà –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –≤–∫–ª–∞–¥ –Ω–∞ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ: "
             f"\n–°—É–º–º–∞ –≤–∫–ª–∞–¥–∞ {amount}"
             f"\n–ü–µ—Ä–∏–æ–¥ {period}"
             f"\n–û–∂–∏–¥–∞–µ–º–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è {profit}",
        show_alert=True
    )

    today = datetime.now().day
    end = db[ID]['stacking']['end_stacking']

    coins: int = db[ID]['coins']

    if today == end:
        coins_after_stake = coins + profit
        await message.answer(
            text=f"–í–∞—à –≤–∫–ª–∞–¥ –±—ã–ª –ø–æ–ø–æ–ª–Ω–µ–Ω!"
                 f"\n–°—É–º–º–∞ –Ω–∞ –≤–∫–ª–∞–¥–µ: {amount}"
                 f"\n–ò—Ç–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ: {profit}"
                 f"\n–û–±—â–∞—è —Å—É–º–º–∞ —Å—á—ë—Ç–∞: {coins_after_stake}",
            show_alert=True
        )
    else:
        await message.answer(
            text=f'–ï—â–µ –Ω–µ –≤—Ä–µ–º—è –¥–ª—è —Å–Ω—è—Ç–∏—è –¥–µ–Ω–µ–≥ —Å –≤–∫–ª–∞–¥–∞'
                 f'\n–í–µ—Ä–Ω–∏—Ç–µ—Å—å {end} —á–∏—Å–ª–∞'
        )
